syntax = "proto3";
package jackaldao.canine.filetree;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "filetree/params.proto";
import "filetree/files.proto";
import "filetree/pubkey.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/jackal-dao/canine/x/filetree/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/jackaldao/canine/filetree/params";
  }
  // Queries a list of Encrypt items.
  rpc Encrypt(QueryEncryptRequest) returns (QueryEncryptResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/filetree/encrypt/{address}/{message}";
  }

  // Queries a list of Decrypt items.
  rpc Decrypt(QueryDecryptRequest) returns (QueryDecryptResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/filetree/decrypt/{message}";
  }

  // Queries a Files by index.
  rpc Files(QueryGetFilesRequest) returns (QueryGetFilesResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/filetree/files/{address}/{ownerAddress}";
  }

  // Queries a list of Files items.
  rpc FilesAll(QueryAllFilesRequest) returns (QueryAllFilesResponse) {
    option (google.api.http).get = "/jackal-dao/canine/filetree/files";
  }

  // Queries a list of GetKeys items.
  rpc GetKeys(QueryGetKeysRequest) returns (QueryGetKeysResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/filetree/get_keys/{hashpath}";
  }

  // Queries a Pubkey by index.
  rpc Pubkey(QueryGetPubkeyRequest) returns (QueryGetPubkeyResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/filetree/pubkey/{address}";
  }

  // Queries a list of Pubkey items.
  rpc PubkeyAll(QueryAllPubkeyRequest) returns (QueryAllPubkeyResponse) {
    option (google.api.http).get = "/jackal-dao/canine/filetree/pubkey";
  }

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryEncryptRequest {
  string address = 1;
  string message = 2;
}

message QueryEncryptResponse { string encryptionData = 1; }

message QueryDecryptRequest { string message = 1; }

message QueryDecryptResponse { string data = 1; }

message QueryGetFilesRequest {
  string address = 1;
  string ownerAddress = 2;
}

message QueryGetFilesResponse {
  Files files = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllFilesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFilesResponse {
  repeated Files files = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetKeysRequest { string hashpath = 1; }

message QueryGetKeysResponse { string keys = 1; }

message QueryGetKeyRequest {
  string filepath = 1;
  string owner = 2;
}

message QueryGetPubkeyRequest { string address = 1; }

message QueryGetPubkeyResponse {
  Pubkey pubkey = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllPubkeyRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPubkeyResponse {
  repeated Pubkey pubkey = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
