syntax = "proto3";
package jackaldao.canine.lp;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "lp/params.proto";
import "lp/l_pool.proto";
import "lp/l_provider_record.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/jackal-dao/canine/x/lp/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/jackal-dao/canine/lp/params";
  }
  // Queries a LPool by index.
  rpc LPool(QueryGetLPoolRequest) returns (QueryGetLPoolResponse) {
    option (google.api.http).get = "/jackal-dao/canine/lp/l_pool/{index}";
  }

  // Queries a list of LPool items.
  rpc LPoolAll(QueryAllLPoolRequest) returns (QueryAllLPoolResponse) {
    option (google.api.http).get = "/jackal-dao/canine/lp/l_pool";
  }

  // Queries a LProviderRecord by pool name and provider address.
  rpc LProviderRecord(QueryGetLProviderRecordRequest)
      returns (QueryGetLProviderRecordResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/lp/l_provider_record/{poolName}/{provider}";
  }

  // Estimate coin output from a swap.
  rpc EstimateSwapOut(QueryEstimateSwapOutRequest)
      returns (QueryEstimateSwapOutResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/lp/estimate_out/{poolName}/{inputCoin}";
  }

  // Estimate coin input to get desired coin output from a swap.
  rpc EstimateSwapIn(QueryEstimateSwapInRequest)
      returns (QueryEstimateSwapInResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/lp/estimate_in/{poolName}/{outputCoins}";
  }

  // Estimate coin inputs to get desired amount of LPToken.
  rpc EstimateContribution(QueryEstimateContributionRequest)
      returns (QueryEstimateContributionResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/lp/estimate_contribution/{poolName}/"
        "{desiredAmount}";
  }

  // Query coins to deposit to make valid liquidity pair.
  // Input one coin and get other coins to deposit to make liquidity pair.
  rpc MakeValidPair(QueryMakeValidPairRequest)
      returns (QueryMakeValidPairResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/lp/make_pair/{poolName}/{coin}";
  }

  // Estimate amoutn of coins returned by burning a LPToken.
  rpc EstimatePoolRemove(QueryEstimatePoolRemoveRequest)
      returns (QueryEstimatePoolRemoveResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/lp/estimate_pool_remove/{amount}";
  }

  // Queries a list of ListRecordsFromPool items.
  rpc ListRecordsFromPool(QueryListRecordsFromPoolRequest)
      returns (QueryListRecordsFromPoolResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine/lp/list_records_from_pool/{poolName}";
  }

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetLPoolRequest { string index = 1; }

message QueryGetLPoolResponse {
  LPool lPool = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllLPoolRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLPoolResponse {
  repeated LPool lPool = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLProviderRecordRequest {
  string provider = 1;
  string poolName = 2;
}

message QueryGetLProviderRecordResponse {
  LProviderRecord lProviderRecord = 1 [ (gogoproto.nullable) = false ];
}

message QueryEstimateSwapOutRequest {
  string poolName = 1;
  string inputCoin = 2;
}

message QueryEstimateSwapOutResponse {
  cosmos.base.v1beta1.Coin outputCoin = 1 [ (gogoproto.nullable) = false ];
}

message QueryEstimateSwapInRequest {
  string poolName = 1;
  string outputCoins = 2;
}

message QueryEstimateSwapInResponse {
  cosmos.base.v1beta1.Coin inputCoins = 1 [ (gogoproto.nullable) = false ];
}

// Estimate amount of coins to deposit to get desired amount of LPToken
message QueryEstimateContributionRequest {
  string poolName = 1;
  string desiredAmount = 2;
}

message QueryEstimateContributionResponse {
  repeated cosmos.base.v1beta1.Coin coins = 1 [ (gogoproto.nullable) = false ];
}

// Query amount of coins to deposit to make a valid liquidity pair
message QueryMakeValidPairRequest {
  string poolName = 1;
  string coin = 2;
}

message QueryMakeValidPairResponse {
  cosmos.base.v1beta1.Coin coin = 1 [ (gogoproto.nullable) = false ];
}

// Estimate pool coins returned by burning LPToken
message QueryEstimatePoolRemoveRequest {
  string poolName = 1;
  string amount = 2;
}

message QueryEstimatePoolRemoveResponse {
  repeated cosmos.base.v1beta1.Coin coins = 1 [ (gogoproto.nullable) = false ];
}

message QueryListRecordsFromPoolRequest { string poolName = 1; }

message QueryListRecordsFromPoolResponse {
  repeated LProviderRecord records = 1 [ (gogoproto.nullable) = false ];
}

// this line is used by starport scaffolding # 3
