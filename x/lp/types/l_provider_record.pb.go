// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lp/l_provider_record.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LProviderRecord is a record of a liquidity provider depositing to a pool.
// It is used to enforce withdraw panelty and calculate rewards collected.
// This record is created only once when provider contributes to a pool and
// only updated after witdrawal or deposit.
// It is deleted when the provider burns all of the liquidity pool token.
// This is stored at KVStore with
//
//	{LProviderRecordKeyPrefix}{poolName}{provider} key.
type LProviderRecord struct {
	// Provider is the account address of the provider.
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// A pool that the provider contributed to.
	PoolName string `protobuf:"bytes,2,opt,name=poolName,proto3" json:"poolName,omitempty"`
	// Burning LP token is locked for certain duration the after provider
	// deposits to the pool. Unlock time is updated every succeeding deposits.
	// The provider can burn their LP token during lock time but has to take
	// certain amount of panelty.
	// Unlock time is blocktime + lockDuration at time of contribution.
	UnlockTime   string `protobuf:"bytes,3,opt,name=unlockTime,proto3" json:"unlockTime,omitempty"`
	LockDuration string `protobuf:"bytes,4,opt,name=lockDuration,proto3" json:"lockDuration,omitempty"`
}

func (m *LProviderRecord) Reset()         { *m = LProviderRecord{} }
func (m *LProviderRecord) String() string { return proto.CompactTextString(m) }
func (*LProviderRecord) ProtoMessage()    {}
func (*LProviderRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_93f334139751266d, []int{0}
}
func (m *LProviderRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LProviderRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LProviderRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LProviderRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LProviderRecord.Merge(m, src)
}
func (m *LProviderRecord) XXX_Size() int {
	return m.Size()
}
func (m *LProviderRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LProviderRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LProviderRecord proto.InternalMessageInfo

func (m *LProviderRecord) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *LProviderRecord) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *LProviderRecord) GetUnlockTime() string {
	if m != nil {
		return m.UnlockTime
	}
	return ""
}

func (m *LProviderRecord) GetLockDuration() string {
	if m != nil {
		return m.LockDuration
	}
	return ""
}

func init() {
	proto.RegisterType((*LProviderRecord)(nil), "jackaldao.canine.lp.LProviderRecord")
}

func init() { proto.RegisterFile("lp/l_provider_record.proto", fileDescriptor_93f334139751266d) }

var fileDescriptor_93f334139751266d = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xca, 0x29, 0xd0, 0xcf,
	0x89, 0x2f, 0x28, 0xca, 0x2f, 0xcb, 0x4c, 0x49, 0x2d, 0x8a, 0x2f, 0x4a, 0x4d, 0xce, 0x2f, 0x4a,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xce, 0x4a, 0x4c, 0xce, 0x4e, 0xcc, 0x49, 0x49,
	0xcc, 0xd7, 0x4b, 0x4e, 0xcc, 0xcb, 0xcc, 0x4b, 0xd5, 0xcb, 0x29, 0x50, 0xea, 0x65, 0xe4, 0xe2,
	0xf7, 0x09, 0x80, 0xaa, 0x0f, 0x02, 0x2b, 0x17, 0x92, 0xe2, 0xe2, 0x80, 0x99, 0x20, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe7, 0x83, 0xe5, 0xf2, 0xf3, 0x73, 0xfc, 0x12, 0x73, 0x53, 0x25,
	0x98, 0xa0, 0x72, 0x50, 0xbe, 0x90, 0x1c, 0x17, 0x57, 0x69, 0x5e, 0x4e, 0x7e, 0x72, 0x76, 0x48,
	0x66, 0x6e, 0xaa, 0x04, 0x33, 0x58, 0x16, 0x49, 0x44, 0x48, 0x89, 0x8b, 0x07, 0xc4, 0x76, 0x29,
	0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x93, 0x60, 0x01, 0xab, 0x40, 0x11, 0x73, 0x72, 0x3c, 0xf1,
	0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8,
	0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xf5, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24,
	0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x88, 0x4f, 0x74, 0x53, 0x12, 0xf3, 0xf5, 0x21, 0x5e, 0xd1, 0xaf,
	0xd0, 0xcf, 0x29, 0xd0, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x7b, 0xd7, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x12, 0xc9, 0xa1, 0x10, 0x0c, 0x01, 0x00, 0x00,
}

func (m *LProviderRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LProviderRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LProviderRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockDuration) > 0 {
		i -= len(m.LockDuration)
		copy(dAtA[i:], m.LockDuration)
		i = encodeVarintLProviderRecord(dAtA, i, uint64(len(m.LockDuration)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UnlockTime) > 0 {
		i -= len(m.UnlockTime)
		copy(dAtA[i:], m.UnlockTime)
		i = encodeVarintLProviderRecord(dAtA, i, uint64(len(m.UnlockTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintLProviderRecord(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintLProviderRecord(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLProviderRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovLProviderRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LProviderRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovLProviderRecord(uint64(l))
	}
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovLProviderRecord(uint64(l))
	}
	l = len(m.UnlockTime)
	if l > 0 {
		n += 1 + l + sovLProviderRecord(uint64(l))
	}
	l = len(m.LockDuration)
	if l > 0 {
		n += 1 + l + sovLProviderRecord(uint64(l))
	}
	return n
}

func sovLProviderRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLProviderRecord(x uint64) (n int) {
	return sovLProviderRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LProviderRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLProviderRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LProviderRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LProviderRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLProviderRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLProviderRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLProviderRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLProviderRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLProviderRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLProviderRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLProviderRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLProviderRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLProviderRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDuration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLProviderRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLProviderRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLProviderRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockDuration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLProviderRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLProviderRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLProviderRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLProviderRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLProviderRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLProviderRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLProviderRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLProviderRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLProviderRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLProviderRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLProviderRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLProviderRecord = fmt.Errorf("proto: unexpected end of group")
)
